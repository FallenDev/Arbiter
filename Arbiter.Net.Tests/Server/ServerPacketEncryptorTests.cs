using Arbiter.Net.Security;
using Arbiter.Net.Server;

namespace Arbiter.Net.Tests.Server;

public class ServerPacketEncryptorTests
{
    private ServerPacketEncryptor _encryptor;
    
    // A server 0x03 Redirect packet (this packet is not encrypted)
    private static readonly byte[] RedirectPacketBytes =
    {
        0xAA, 0x00, 0x20, 0x03, 0x01, 0x00, 0x00, 0x7F, 0x0A, 0x32, 0x17, 0x07, 0x09, 0x63, 0x3E, 0x5F, 0x41, 0x46,
        0x78, 0x21, 0x68, 0x2C, 0x07, 0x4D, 0x6F, 0x6E, 0x69, 0x74, 0x6F, 0x72, 0x00, 0x00, 0x0C, 0xD2, 0x00
    };
    
    // A server 0x0A World Message packet (this packet is encrypted with static key)
    private static readonly byte[] WorldMessagePacketBytes =
    {
        0xAA, 0x00, 0x3D, 0x0A, 0x5F, 0xDE, 0x80, 0xD4, 0xAD, 0x91, 0xA9, 0xF1, 0xB7, 0xB2, 0xB3, 0xED, 0x8C, 0x96,
        0x89, 0xE4, 0xFC, 0xA0, 0xB0, 0xB8, 0xA4, 0x82, 0x97, 0x9D, 0xB1, 0xE8, 0xF2, 0xF9, 0xBD, 0xA6, 0x8A, 0x90,
        0x92, 0xAB, 0xB9, 0xA7, 0xFD, 0xA1, 0xE0, 0xC9, 0x96, 0xD0, 0xBA, 0xF2, 0xBF, 0xE8, 0xF7, 0xE3, 0x85, 0xD5,
        0x9A, 0xA9, 0xE7, 0xFC, 0xFD, 0xA8, 0xE9, 0x7C, 0x24, 0x9C
    };
    
    // A server 0x33 Show User packet (this packet is encrypted with hash key)
    private static readonly byte[] ShowUserPacketBytes =
    {
        0xAA, 0x00, 0x36, 0x33, 0x35, 0x5C, 0x0C, 0x5B, 0x57, 0x0A, 0x08, 0x54, 0x2D, 0xA5, 0x5E, 0x0E, 0x48, 0x5C,
        0x0B, 0x0B, 0x58, 0x58, 0xA0, 0x58, 0x0B, 0x5E, 0x57, 0x0C, 0x0C, 0x5E, 0x5F, 0x59, 0x5A, 0x09, 0x5D, 0x58,
        0x0E, 0x0E, 0x5C, 0x5D, 0x5B, 0x54, 0x07, 0x53, 0x56, 0x07, 0x4D, 0x3D, 0x3D, 0x3C, 0x22, 0x6A, 0x23, 0x54,
        0xF4, 0x94, 0xFB
    };
    
    // A server 0x2F Dialog Menu packet (this packet is encrypted with hash key)
    private static readonly byte[] DialogMenuPacketBytes =
    {
        0xAA, 0x00, 0xA1, 0x2F, 0x53, 0x9E, 0x9F, 0x91, 0x90, 0x85, 0xF2, 0xC2, 0x80, 0xC4, 0x9C, 0x9D, 0xD1, 0x96, 0x9C,
        0x96, 0xC4, 0x92, 0xAB, 0xF5, 0xF4, 0xF4, 0x94, 0x84, 0xD8, 0xA2, 0xAA, 0xA8, 0xF7, 0xB6, 0xB7, 0xB6, 0xCF,
        0xFA, 0xA4, 0xB0, 0xE6, 0xF5, 0xF7, 0xF7, 0xB8, 0xDF, 0xBC, 0xAF, 0xA5, 0xE8, 0xF2, 0xFB, 0xE9, 0xBA, 0xED,
        0xF1, 0xBC, 0xF7, 0xCD, 0x91, 0xD0, 0xE8, 0xE5, 0x92, 0xD8, 0xCB, 0x9D, 0xA9, 0xFC, 0xFC, 0x9F, 0xDF, 0x9D,
        0xD7, 0xA4, 0xA0, 0xAB, 0xFA, 0xE6, 0xA1, 0xC3, 0xE7, 0xF2, 0xBA, 0xB1, 0xA3, 0x8A, 0xCF, 0x8B, 0xD1, 0xFB,
        0xEF, 0xBC, 0xBD, 0xBB, 0xE4, 0xED, 0x8F, 0x0D, 0x84, 0xD4, 0xA5, 0xB7, 0xBD, 0xE6, 0xE1, 0xE9, 0xE1, 0xA8,
        0xD3, 0xA0, 0xB1, 0xA5, 0xF2, 0x81, 0x73, 0x98, 0xD4, 0xE5, 0xB4, 0xB4, 0xB9, 0xA3, 0xF7, 0xAB, 0xCD, 0xF6,
        0xEB, 0xBC, 0xAC, 0xB3, 0xEC, 0xE5, 0x89, 0x35, 0x8F, 0xC5, 0xAA, 0xB0, 0xB8, 0xE1, 0xEE, 0xEA, 0xAE, 0xC2,
        0xE3, 0xAF, 0xA8, 0xB6, 0xBA, 0x04, 0xBB, 0xA4, 0x8D, 0x1B, 0x1F, 0x38, 0x1F, 0xA5, 0xE3, 0x98, 0x99, 0xA0, 0x1F
    };
    
    // A server 0x30 Dialog packet (this packet is encrypted with hash key)
    private static readonly byte[] DialogPacketBytes =
    {
        0xAA, 0x00, 0xF2, 0x30, 0x60, 0xA4, 0xF7, 0xF5, 0xA3, 0xEA, 0x90, 0xA2, 0xE6, 0xF7, 0xA6, 0xF5, 0xB5, 0xA5, 0xF3,
        0xF4, 0x18, 0xA6, 0xAD, 0xA0, 0xF2, 0xF1, 0xA2, 0xA7, 0x9B, 0xC8, 0xCE, 0x96, 0xA2, 0x20, 0xBA, 0x85, 0x80,
        0x91, 0xD6, 0x82, 0x9F, 0xD9, 0x8D, 0x89, 0x8B, 0x8B, 0x9B, 0xC6, 0xC5, 0x95, 0xCA, 0x99, 0x9B, 0x89, 0x94,
        0x9A, 0x89, 0xE6, 0x98, 0xDD, 0x91, 0xD7, 0x8F, 0xB5, 0x9F, 0x88, 0xDB, 0xDF, 0xCB, 0xD8, 0x9F, 0xC8, 0x9E,
        0x8A, 0x8D, 0xC9, 0x95, 0xDD, 0x8A, 0x81, 0x93, 0x95, 0x8E, 0xD2, 0xC0, 0xC3, 0xC3, 0x97, 0x82, 0xD5, 0xC3,
        0x90, 0xDE, 0x96, 0x83, 0xC2, 0x8B, 0x8F, 0xD0, 0xC5, 0x8F, 0xDE, 0xDC, 0x8C, 0x92, 0x94, 0x8C, 0x95, 0x8A,
        0x85, 0x95, 0xDB, 0x8B, 0x9C, 0x9A, 0x85, 0xDE, 0xC9, 0x99, 0xDE, 0xD9, 0xCB, 0xD6, 0x83, 0x9A, 0xCB, 0x98,
        0xCC, 0xD6, 0xD8, 0xC9, 0xCC, 0x82, 0x8C, 0x9F, 0x80, 0x85, 0xCD, 0xD6, 0x86, 0xD4, 0x8F, 0xC5, 0x9D, 0xA7,
        0x8D, 0x9D, 0xD6, 0x88, 0xE2, 0xA2, 0xF5, 0xE5, 0xBE, 0xA4, 0xA3, 0xE1, 0xAB, 0xE5, 0xBD, 0xA3, 0xE4, 0xBE,
        0xB1, 0xEF, 0xF2, 0xF1, 0xE9, 0xBC, 0xF1, 0xC6, 0xB7, 0xB7, 0xEB, 0xAE, 0xF7, 0xCB, 0xF0, 0xB7, 0xEA, 0xF7,
        0xB8, 0xEA, 0xF2, 0xB0, 0xAC, 0xB6, 0xB8, 0xAB, 0xB0, 0xAD, 0xAB, 0xE8, 0xB4, 0xE7, 0xB2, 0xB8, 0xA9, 0xAC,
        0xB9, 0xE5, 0xE2, 0xF7, 0xA8, 0x8E, 0xBC, 0xE3, 0xB1, 0xFA, 0xE7, 0xE1, 0xB2, 0xAA, 0xAC, 0xB4, 0xAD, 0xBD,
        0xBD, 0xAD, 0xF9, 0xBC, 0xF2, 0xA3, 0xE9, 0xB3, 0xA7, 0xA9, 0xE1, 0xB4, 0xAE, 0xF3, 0xEA, 0xE7, 0xC6, 0xAA,
        0xA8, 0xFD, 0xB6, 0xB8, 0xFF, 0xB7, 0xFE, 0xEF, 0x1F, 0x86
    };
    
    [SetUp]
    public void Setup()
    {
        var parameters = new NetworkEncryptionParameters(0x07,
            new byte[] { 0x63, 0x3E, 0x5F, 0x41, 0x46, 0x78, 0x21, 0x68, 0x2C }, "Monitor");
        _encryptor = new ServerPacketEncryptor { Parameters = parameters };
    }

    [Test]
    public void Should_Not_Decrypt_When_Not_Encrypted()
    {
        var rawBytes = RedirectPacketBytes;
        var command = rawBytes[3];
        var payload = rawBytes[4..];

        var serverPacket = new ServerPacket(command, payload.AsSpan());
        var decrypted = _encryptor.Decrypt(serverPacket);

        Assert.That(decrypted.Data, Is.EqualTo(payload));
    }
    
    [Test]
    public void Should_Retain_Command_When_Decrypting()
    {
        var rawBytes = RedirectPacketBytes;
        var command = rawBytes[3];
        var payload = rawBytes[4..];
        
        var serverPacket = new ServerPacket(command, payload.AsSpan());
        var decrypted = _encryptor.Decrypt(serverPacket);
        
        Assert.That(decrypted.Command, Is.EqualTo(command));   
    }

    [Test]
    public void Should_Decrypt_With_Static_Key()
    {
        var rawBytes = WorldMessagePacketBytes;
        var payload = rawBytes[4..];

        var serverPacket = new ServerPacket(rawBytes[3], payload.AsSpan());
        var decrypted = _encryptor.Decrypt(serverPacket);

        byte[] messageBytes =
        [
            0x03, 0x00, 0x35, 0x52, 0x69, 0x6F, 0x6E, 0x61, 0x20, 0x6C, 0x6F, 0x6F, 0x6B, 0x73, 0x20, 0x61, 0x74, 0x20,
            0x61, 0x20, 0x67, 0x6C, 0x61, 0x73, 0x73, 0x20, 0x6F, 0x66, 0x20, 0x6D, 0x69, 0x6C, 0x6B, 0x20, 0x77, 0x69,
            0x74, 0x68, 0x20, 0x61, 0x20, 0x74, 0x65, 0x61, 0x72, 0x20, 0x69, 0x6E, 0x20, 0x68, 0x65, 0x72, 0x20, 0x65,
            0x79, 0x65
        ];

        Assert.That(decrypted.Data, Is.EqualTo(messageBytes));
    }

    [Test]
    public void Should_Decrypt_With_Hash_Key()
    {
        var rawBytes = ShowUserPacketBytes;
        var payload = rawBytes[4..];
        
        var serverPacket = new ServerPacket(rawBytes[3], payload.AsSpan());
        var decrypted = _encryptor.Decrypt(serverPacket);

        byte[] userBytes =
        [
            0x00, 0x03, 0x00, 0x09, 0x02, 0x00, 0x0E, 0x76, 0xF8, 0x00, 0x03, 0x11, 0x00, 0x01, 0x01, 0x00, 0x01, 0xFF,
            0x00, 0x00, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x07, 0x4D, 0x6F, 0x6E, 0x69, 0x74, 0x6F, 0x72, 0x00
        ];
        
        Assert.That(decrypted.Data, Is.EqualTo(userBytes));   
    }

    [Test]
    public void Should_Decrypt_Dialog_Menu()
    {
        var rawBytes = DialogMenuPacketBytes;
        var payload = rawBytes[4..];
        
        var serverPacket = new ServerPacket(rawBytes[3], payload.AsSpan());
        var decrypted = _encryptor.Decrypt(serverPacket);

        byte[] menuBytes =
        [
            0x00, 0x01, 0x00, 0x00, 0x1B, 0x66, 0x01, 0x42, 0x04, 0x00, 0x01, 0x42, 0x04, 0x00, 0x00, 0x05, 0x52, 0x69,
            0x6F, 0x6E, 0x61, 0x00, 0x1E, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2E, 0x20, 0x20, 0x57, 0x68, 0x61, 0x74, 0x20,
            0x63, 0x61, 0x6E, 0x20, 0x49, 0x20, 0x64, 0x6F, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x79, 0x6F, 0x75, 0x3F, 0x07,
            0x03, 0x42, 0x75, 0x79, 0x00, 0x40, 0x04, 0x53, 0x65, 0x6C, 0x6C, 0x00, 0x41, 0x0D, 0x4D, 0x69, 0x6C, 0x65,
            0x74, 0x68, 0x20, 0x43, 0x69, 0x76, 0x69, 0x63, 0x73, 0x06, 0x43, 0x08, 0x53, 0x77, 0x69, 0x6D, 0x6D, 0x69,
            0x6E, 0x67, 0x0A, 0x89, 0x0E, 0x54, 0x72, 0x61, 0x69, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x51, 0x75, 0x65, 0x73,
            0x74, 0x07, 0xFA, 0x10, 0x52, 0x69, 0x6F, 0x6E, 0x61, 0x27, 0x73, 0x20, 0x47, 0x72, 0x65, 0x65, 0x74, 0x69,
            0x6E, 0x67, 0x04, 0xB9, 0x0D, 0x4D, 0x75, 0x6E, 0x64, 0x61, 0x6E, 0x65, 0x20, 0x42, 0x69, 0x72, 0x74, 0x68,
            0x04, 0xBA, 0x0A, 0x14, 0x33, 0xAF, 0xFC, 0xDA, 0xFF, 0x19, 0x5F, 0x2B
        ];
        
        Assert.That(decrypted.Data, Is.EqualTo(menuBytes));  
    }

    [Test]
    public void Should_Decrypt_Dialog()
    {
        var rawBytes = DialogPacketBytes;
        var payload = rawBytes[4..];
        
        var serverPacket = new ServerPacket(rawBytes[3], payload.AsSpan());
        var decrypted = _encryptor.Decrypt(serverPacket);

        byte[] dialogBytes =
        [
            0x00, 0x01, 0x00, 0x00, 0x1B, 0x66, 0x01, 0x42, 0x04, 0x00, 0x01, 0x42, 0x04, 0x00, 0x00, 0xB9, 0x00, 0x5C,
            0x00, 0x00, 0x00, 0x05, 0x52, 0x69, 0x6F, 0x6E, 0x61, 0x00, 0xD0, 0x49, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6A,
            0x75, 0x73, 0x74, 0x20, 0x72, 0x65, 0x6D, 0x69, 0x6E, 0x64, 0x65, 0x64, 0x20, 0x6F, 0x66, 0x20, 0x48, 0x61,
            0x75, 0x6B, 0x2E, 0x20, 0x48, 0x65, 0x27, 0x73, 0x20, 0x61, 0x20, 0x64, 0x65, 0x61, 0x72, 0x20, 0x63, 0x68,
            0x69, 0x6C, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62,
            0x72, 0x69, 0x6E, 0x67, 0x20, 0x6D, 0x69, 0x6C, 0x6B, 0x20, 0x74, 0x6F, 0x20, 0x6D, 0x65, 0x20, 0x69, 0x6E,
            0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x65, 0x65, 0x20, 0x68, 0x6F, 0x75, 0x72, 0x73, 0x20, 0x6F, 0x66, 0x20,
            0x74, 0x68, 0x65, 0x20, 0x6D, 0x6F, 0x72, 0x6E, 0x69, 0x6E, 0x67, 0x2E, 0x20, 0x48, 0x65, 0x20, 0x6C, 0x65,
            0x66, 0x74, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x65, 0x78, 0x63, 0x69, 0x74, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x20,
            0x69, 0x6E, 0x20, 0x41, 0x62, 0x65, 0x6C, 0x2E, 0x20, 0x49, 0x20, 0x64, 0x6F, 0x20, 0x68, 0x6F, 0x70, 0x65,
            0x20, 0x68, 0x65, 0x20, 0x69, 0x73, 0x20, 0x64, 0x6F, 0x69, 0x6E, 0x67, 0x20, 0x77, 0x65, 0x6C, 0x6C, 0x2E,
            0x20, 0x54, 0x65, 0x6C, 0x6C, 0x20, 0x68, 0x69, 0x6D, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65, 0x20, 0x73, 0x61,
            0x66, 0x65, 0x2C, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x6D, 0x65, 0x2E, 0x20, 0x57, 0x69, 0x6C, 0x6C, 0x20, 0x79,
            0x6F, 0x75, 0x3F
        ];
        
        Assert.That(decrypted.Data, Is.EqualTo(dialogBytes)); 
    }
}